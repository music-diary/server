generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                 String       @id @default(uuid())
  phoneNumber        String       @map("phone_number") // TODO production 시, unique 처리 필수
  name               String       @db.VarChar(6)
  birthDay           DateTime     @map("birth_day")
  gender             Gender       @default(FEMALE)
  isGenreSuggested   Boolean      @map("is_genre_suggested") // 새로운 장르 추천 여부
  isAgreedMarketing  Boolean      @map("is_agreed_marketing") // 마케팅 동의여부
  profileImageKey    String?      @map("profile_image_key") // image file s3 key
  profileImageUrl    String?      @map("profile_image_url") // s3 url
  useLimitCount      Int          @default(1) @map("use_limit_count") // 무료인 경우 자정 기준 1번만 가능 (편지, 일기)
  IsAgreedDiaryAlarm Boolean      @default(false) @map("is_agreed_diary_alarm")
  diaryAlarmTime     DateTime?    @map("diary_alarm_time") @db.Time(3)
  role               Role         @default(USER)
  status             UserStatus   @default(ACTIVE)
  diaries            Diaries[]    @relation("UserDiaries")
  // withdraws         Withdraws    @relation(fields [withdrawId], references [id])
  // report Report[]
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")
  deletedAt          DateTime?    @map("deleted_at")
  genres             UserGenres[]
  Musics             Musics[]

  @@index([id])
  @@map("users")
}

model Genres {
  id    String       @id @default(uuid())
  label String       @db.VarChar(30)
  name  String       @db.VarChar(30)
  color String       @db.VarChar(10)
  order Int          @default(0)
  users UserGenres[]

  @@index([id, name])
  @@map("genres")
}

model UserGenres {
  id      String  @id @unique()
  userId  String? @map("user_id")
  genreId String? @map("genre_id")
  genres  Genres? @relation(fields: [genreId], references: [id], onDelete: NoAction)
  users   Users?  @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@index([id, userId, genreId])
  @@map("user_genres")
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  DEACTIVE
}

model Diaries {
  id         String        @id @default(uuid())
  userId     String        @map("user_id")
  title      String?       @db.VarChar(30)
  content    String?       @db.VarChar(500)
  templateId String?       @map("template_id")
  status     DiariesStatus
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")

  users       Users           @relation("UserDiaries", fields: [userId], references: [id])
  templates   Templates?      @relation(fields: [templateId], references: [id])
  topics      DiaryTopics[]
  emotions    DiaryEmotions[]
  diaryMusics DiaryMusic[]
  musics      Musics[]

  @@index([id, userId, templateId])
  @@map("diaries")
}

enum DiariesStatus {
  EDIT // 노래 추천 이전까지 (임시저장)
  PENDING // 노래 추천 대기 중
  DONE // 일기 작성 완료
}

model Emotions {
  id       String  @id @default(uuid())
  name     String  @db.VarChar(30)
  label    String  @db.VarChar(30)
  parentId String? @map("parent_id")
  level    Int     @default(0)
  order    Int     @default(0)

  children Emotions[]      @relation("EmotionToEmotion")
  parent   Emotions?       @relation("EmotionToEmotion", fields: [parentId], references: [id])
  diaries  DiaryEmotions[]

  @@index([id, parentId, level])
  @@map("emotions")
}

model DiaryEmotions {
  id        String @id @default(uuid())
  diaryId   String @map("diary_id")
  emotionId String @map("emotion_id")

  diary    Diaries  @relation(fields: [diaryId], references: [id])
  emotions Emotions @relation(fields: [emotionId], references: [id])
  musicsId String?

  @@index([id, diaryId, emotionId])
}

model Topics {
  id      String        @id @default(uuid())
  label   String        @db.VarChar(30)
  name    String        @db.VarChar(30)
  emoji   String?       @db.VarChar(10)
  order   Int           @default(0)
  diaries DiaryTopics[]

  @@index([id])
  @@map("topics")
}

model DiaryTopics {
  id      String @id @default(uuid())
  diaryId String @map("diary_id")
  topicId String @map("topic_id")

  diary    Diaries @relation(fields: [diaryId], references: [id])
  topic    Topics  @relation(fields: [topicId], references: [id])
  musicsId String?

  @@index([id, diaryId, topicId])
}

model Templates {
  id          String @id @default(uuid())
  name        String
  description String
  type        String // SCS | KPT | MSG | 4L | 5F
  order       Int    @default(0)

  diaries          Diaries[]
  templateContents TemplateContents[]

  @@index([id])
  @@map("templates")
}

model TemplateContents {
  id         String  @id @default(uuid())
  templateId String  @map("template_id")
  content    String? @db.VarChar(200)
  order      Int     @default(0)
  name       String  @db.VarChar(20)
  label      String  @db.VarChar(50)

  templates Templates? @relation(fields: [templateId], references: [id])

  @@index([id, templateId])
  @@map("template_contents")
}

model DiaryMusic {
  id      String @id @default(uuid())
  diaryId String @map("diary_id")
  musicId String @map("mucsic_id")

  diary Diaries @relation(fields: [diaryId], references: [id])
  mucic Musics  @relation(fields: [musicId], references: [id])

  @@index([id, diaryId, musicId])
}

model Musics {
  id            String   @id @default(uuid())
  songId        String   @map("song_id") @db.VarChar(20)
  title         String   @db.VarChar(80)
  artist        String   @db.VarChar(80)
  albumUrl      String?  @map("album_url") @db.VarChar(255)
  selectedLyric String?  @map("selected_lyric") @db.VarChar(1000)
  lyric         String?  @map("lyrics") @db.VarChar(65535)
  originalGenre String?  @map("original_genre") @db.VarChar(30)
  userId        String?  @map("user_id")
  diaryId       String?  @map("diary_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  users       Users?       @relation(fields: [userId], references: [id])
  diaryMusics DiaryMusic[]
  diary       Diaries?     @relation(fields: [diaryId], references: [id])

  @@index([id, userId, diaryId])
  @@map("musics")
}
