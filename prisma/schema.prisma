generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                String       @id @default(uuid())
  phoneNumber       String       @map("phone_number") // TODO production 시, unique 처리 필수
  name              String       @db.VarChar(6)
  birthDay          DateTime     @map("birth_day")
  gender            Gender       @default(FEMALE)
  isGenreSuggested  Boolean      @map("is_genre_suggested") // 새로운 장르 추천 여부
  isAgreedMarketing Boolean      @map("is_agreed_marketing") // 마케팅 동의여부
  profileImageKey   String?      @map("profile_image_key") // image file s3 key
  profileImageUrl   String?      @map("profile_image_url") // s3 url
  useLimitCount     Int          @default(1) @map("use_limit_count") // 무료인 경우 자정 기준 1번만 가능 (편지, 일기)
  role              Role         @default(USER)
  status            UserStatus   @default(ACTIVE)
  diaries           Diaries[]    @relation("UserDiaries")
  emotions          Emotions[]
  // withdraws         Withdraws    @relation(fields [withdrawId], references [id])
  // report Report[]
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  deletedAt         DateTime?    @map("deleted_at")
  genres            UserGenres[]

  @@index([id])
  @@map("users")
}

model Genres {
  id    String       @id @default(uuid())
  name  String       @db.VarChar(30)
  users UserGenres[]

  @@index([id, name])
  @@map("genres")
}

model UserGenres {
  id      String  @id @unique()
  userId  String? @map("user_id")
  genreId String? @map("genre_id")
  genres  Genres? @relation(fields: [genreId], references: [id], onDelete: NoAction)
  users   Users?  @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@index([id, userId, genreId])
  @@map("user_genres")
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  DEACTIVE
}

model Diaries {
  id        String        @id @default(uuid())
  users     Users         @relation("UserDiaries", fields: [userId], references: [id])
  userId    String        @map("user_id")
  title     String        @db.VarChar(20)
  content   String        @db.VarChar(500)
  emotion   Emotions      @relation(fields: [emotionId], references: [id])
  emotionId String        @map("emotion_id")
  topic     Topics[]
  // music     Musics
  // selectedLyrics? String
  status    DiariesStatus
  templates Templates[]
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@index([id, userId, emotionId])
  @@map("diaries")
}

enum DiariesStatus {
  EDIT // 노래 추천 이전까지 (임시저장)
  PENDING // 노래 추천 대기 중
  DONE // 일기 작성 완료
}

model Emotions {
  id       String     @id @default(uuid())
  name     String     @db.VarChar(30)
  parentId String?    @map("parent_id")
  children Emotions[] @relation("EmotionToEmotion")
  parent   Emotions?  @relation("EmotionToEmotion", fields: [parentId], references: [id])
  diaries  Diaries[]
  Users    Users?     @relation(fields: [userId], references: [id])
  userId   String?    @map("user_id")

  @@index([id, userId, parentId])
  @@map("emotions")
}

model Topics {
  id      String    @id @default(uuid())
  name    String    @db.VarChar(30)
  emoji   String?   @db.VarChar(10)
  diaries Diaries[]

  @@index([id])
  @@map("topics")
}

model Templates {
  id              String       @id @default(uuid())
  name            String
  description     String
  type            TemplateType
  templateContent Json?
  diary           Diaries?     @relation(fields: [diaryId], references: [id])
  diaryId         String?

  @@index([id, diaryId])
  @@map("templates")
}

enum TemplateType {
  SCS
  KPT
  MSG
  FOURL // 4L
  FIVEF // 5F
}

// ScsSchema {
// 	stop String
// 	continue String
// 	start String
// }
// KptSchema {
// 	keep String
// 	problem String
// 	try String
// }
// MadSchema {
// 	mad String
// 	sad String
// 	glad String
// }
// 5FSchema {
// 	fact String
// 	feeling String
// 	finding String
// 	futureAction String
// 	feedback String
// }
// 4LSchema {
// 	loved String
// 	learned String
// 	lacked String
// 	longedFor String
// }
