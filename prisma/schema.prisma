// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                String       @id @default(uuid())
  phoneNumber       String       @map("phone_number") // TODO: production 시, unique 처리 필수
  name              String       @db.VarChar(6)
  birthDay          DateTime     @map("birth_day")
  gender            Gender       @default(FEMALE)
  isGenreSuggested  Boolean      @map("is_genre_suggested") // 새로운 장르 추천 여부
  isAgreedMarketing Boolean      @map("is_agreed_marketing") // 마케팅 동의여부
  profileImageKey   String?      @map("profile_image_key") // image file s3 key
  profileImageUrl   String?      @map("profile_image_url") // s3 url
  useLimitCount     Int          @default(1) @map("use_limit_count") // 무료인 경우 자정 기준 1번만 가능 (편지, 일기)
  role              Role         @default(USER)
  status            UserStatus   @default(ACTIVE)
  // withdraws         Withdraws    @relation(fields: [withdrawId], references: [id])
  // report Report[]
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  deletedAt         DateTime?    @map("deleted_at")
  UserGenres        UserGenres[]

  @@index([id])
  @@map("users")
}

model UserGenres {
  id      String  @id @default(uuid())
  Users   Users?  @relation(fields: [userId], references: [id])
  userId  String?
  Genres  Genres? @relation(fields: [genreId], references: [id])
  genreId String?

  @@index([userId, genreId])
  @@map("user_genres")
}

model Genres {
  id         String       @id @default(uuid())
  name       String       @db.VarChar(30)
  UserGenres UserGenres[]

  @@index([id])
  @@map("genres")
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  DEACTIVE
}
